#!/usr/bin/env node

"use strict";

const open = require("open");
const optimist = require("optimist");

require("./lib/utils");
const database = require("./lib/db");
const MetaDataSync = require("./lib/sync").MetaDataSync;

const argv = optimist
    .usage("$0 [-h][-r <min-rating>][-s][-u|-U] <input>".yellow)
    .option("h", {
      alias: "help",
      description: "Show usage"
    })
    .option("p", {
      alias: "port",
      default: 8080,
      description: "Server port"
    })
    .option("r", {
      alias: "rating",
      description: "Play media by rating"
    })
    .option("s", {
      alias: "server",
      description: "Start server"
    })
    .option("u", {
      alias: "update",
      description: "Update meta data and previews"
    })
    .option("U", {
      alias: "forceupdate",
      description: "Force update meta data and previews (overwrite existing)"
    })
    .boolean(["h", "s", "u", "U"])
    .check((argv) => {
      if (argv.help)
        throw "";
      
      if (argv._.length === 0)
        throw "No input directory specified";
    })
    .argv;
const inputDir = argv._[0];

let db = database.open(inputDir);
let metaSync = new MetaDataSync(db);
let result = metaSync.sync({
  forceUpdate: argv.forceupdate,
  inputDir,
  update: argv.update
});
if (argv.server || "rating" in argv) {
  const Server = require("./lib/server");
  let server = new Server(db);
  result = result.then(() => server.listen(argv.port));
  
  if ("rating" in argv) {
    db.setPlaylist({rating: argv.rating});
    result = result.then(() => open(`http://localhost:${argv.port}/playlist/videos.m3u8`, "vlc"));
  }
}
result.catch((err) => console.error(`Bootstrap error: ${err.stack}`));
